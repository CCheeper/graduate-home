{"remainingRequest":"G:\\360data\\重要数据\\我的文档\\HBuilderProjects\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\360data\\重要数据\\我的文档\\HBuilderProjects\\test\\src\\components\\test.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\360data\\重要数据\\我的文档\\HBuilderProjects\\test\\src\\components\\test.vue","mtime":1589436419557},{"path":"G:\\360data\\重要数据\\我的文档\\HBuilderProjects\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1587441022193},{"path":"G:\\360data\\重要数据\\我的文档\\HBuilderProjects\\test\\node_modules\\babel-loader\\lib\\index.js","mtime":1587441043907},{"path":"G:\\360data\\重要数据\\我的文档\\HBuilderProjects\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1587441022193},{"path":"G:\\360data\\重要数据\\我的文档\\HBuilderProjects\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":1587441040519}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\nconst toolbarOptions = [\n    ['bold', 'italic', 'underline', 'strike'],        // 切换按钮\n    ['blockquote', 'code-block'],\n\n    [{ 'header': 1 }, { 'header': 2 }],               // 用户自定义按钮值\n    [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n    [{ 'script': 'sub'}, { 'script': 'super' }],      // 上标/下标\n    [{ 'indent': '-1'}, { 'indent': '+1' }],          // 减少缩进/缩进\n    [{ 'direction': 'rtl' }],                         // 文本下划线\n\n    [{ 'size': ['small', false, 'large', 'huge'] }],  // 用户自定义下拉\n    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n\n    [{ 'color': [] }, { 'background': [] }],          // 主题默认下拉，使用主题提供的值\n    [{ 'font': [] }],\n    [{ 'align': [] }],\n    ['image'],\n    ['clean']                                         // remove formatting button\n];\nexport default {\n\n    name: 'test',\n    props: {\n        msg: String\n    },\n    computed: {\n        editor() {\n            return this.$refs.myQuillEditor.quill;\n        },\n    },\n\n    methods: {\n\n        onEditorReady(editor) { // 准备编辑器\n        },\n\n        quillChange(file){\n            this.param.imgFile = file.raw;\n        },\n        // 富文本图片上传前\n        uploadSuccess(res, file) {\n            // res为图片服务器返回的数据\n            // 获取富文本组件实例\n            let quill = this.$refs.myQuillEditor.quill;\n            console.log(res.meta.res)\n            // 如果上传成功\n            if (res.meta.res === 200) {\n                // 获取光标所在位置\n                let length = quill.getSelection().index;\n                // 插入图片  res.info为服务器返回的图片地址\n                quill.insertEmbed(length, 'image', res.meta.qnUrl);\n                // 调整光标到最后\n                quill.setSelection(length + 1)\n            } else {\n                this.$message.error('图片插入失败')\n            }\n        },\n\n        // 富文本图片上传失败\n        uploadError() {\n            this.$message.error('图片插入失败')\n        },\n\n        onEditorBlur() {\n        }, // 失去焦点事件\n        onEditorFocus() {\n        }, // 获得焦点事件\n        onEditorChange() {\n        }, // 内容改变事件\n        saveHtml: function (event) {\n            alert(this.content);\n        }\n    },\n    data() {\n        return {\n            content: `<p>hello world</p>`,\n            editorOption: {\n                placeholder: '',\n                theme: 'snow',  // or 'bubble'\n                modules: {\n                    toolbar: {\n                        container: toolbarOptions,  // 工具栏\n                        handlers: {\n                            'image': function (value) {\n                                if (value) {\n                                    // 触发input框选择图片文件\n                                    document.querySelector('.avatar input').click();\n                                } else {\n                                    this.quill.format('image', false);\n                                }\n                            }\n                        },\n                    }\n                }\n            },\n            header: {\n                // token: sessionStorage.token\n            }, // 有的图片服务器要求请求头需要有token\n            param:{\n                imgFile:\"\",\n            },\n            apiurl: \"/text/pupload\"\n\n        }\n    }\n\n}\n",{"version":3,"sources":["test.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","file":"test.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div class=\"edit_container\">\r\n\r\n        <el-upload\r\n                class=\"avatar\"\r\n                ref=\"quillUpload\"\r\n                action=\"/text/pupload\"\r\n                name=\"img\"\r\n                :show-file-list=\"false\"\r\n                :on-success=\"uploadSuccess\"\r\n                :on-error=\"uploadError\"\r\n                :on-change=\"quillChange\"\r\n                :before-upload=\"beforeUpload\"\r\n                :data=\"param\"\r\n                style=\"height: 0\">\r\n        </el-upload>\r\n        <quill-editor\r\n                v-model=\"content\"\r\n                ref=\"myQuillEditor\"\r\n                :options=\"editorOption\"\r\n                @blur=\"onEditorBlur($event)\"\r\n                @focus=\"onEditorFocus($event)\"\r\n                @change=\"onEditorChange($event)\"\r\n                style=\"width: 60% ;\">\r\n\r\n        </quill-editor>\r\n        <button v-on:click=\"saveHtml\">保存</button>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from 'axios'\r\n    const toolbarOptions = [\r\n        ['bold', 'italic', 'underline', 'strike'],        // 切换按钮\r\n        ['blockquote', 'code-block'],\r\n\r\n        [{ 'header': 1 }, { 'header': 2 }],               // 用户自定义按钮值\r\n        [{ 'list': 'ordered'}, { 'list': 'bullet' }],\r\n        [{ 'script': 'sub'}, { 'script': 'super' }],      // 上标/下标\r\n        [{ 'indent': '-1'}, { 'indent': '+1' }],          // 减少缩进/缩进\r\n        [{ 'direction': 'rtl' }],                         // 文本下划线\r\n\r\n        [{ 'size': ['small', false, 'large', 'huge'] }],  // 用户自定义下拉\r\n        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n\r\n        [{ 'color': [] }, { 'background': [] }],          // 主题默认下拉，使用主题提供的值\r\n        [{ 'font': [] }],\r\n        [{ 'align': [] }],\r\n        ['image'],\r\n        ['clean']                                         // remove formatting button\r\n    ];\r\n    export default {\r\n\r\n        name: 'test',\r\n        props: {\r\n            msg: String\r\n        },\r\n        computed: {\r\n            editor() {\r\n                return this.$refs.myQuillEditor.quill;\r\n            },\r\n        },\r\n\r\n        methods: {\r\n\r\n            onEditorReady(editor) { // 准备编辑器\r\n            },\r\n\r\n            quillChange(file){\r\n                this.param.imgFile = file.raw;\r\n            },\r\n            // 富文本图片上传前\r\n            uploadSuccess(res, file) {\r\n                // res为图片服务器返回的数据\r\n                // 获取富文本组件实例\r\n                let quill = this.$refs.myQuillEditor.quill;\r\n                console.log(res.meta.res)\r\n                // 如果上传成功\r\n                if (res.meta.res === 200) {\r\n                    // 获取光标所在位置\r\n                    let length = quill.getSelection().index;\r\n                    // 插入图片  res.info为服务器返回的图片地址\r\n                    quill.insertEmbed(length, 'image', res.meta.qnUrl);\r\n                    // 调整光标到最后\r\n                    quill.setSelection(length + 1)\r\n                } else {\r\n                    this.$message.error('图片插入失败')\r\n                }\r\n            },\r\n\r\n            // 富文本图片上传失败\r\n            uploadError() {\r\n                this.$message.error('图片插入失败')\r\n            },\r\n\r\n            onEditorBlur() {\r\n            }, // 失去焦点事件\r\n            onEditorFocus() {\r\n            }, // 获得焦点事件\r\n            onEditorChange() {\r\n            }, // 内容改变事件\r\n            saveHtml: function (event) {\r\n                alert(this.content);\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                content: `<p>hello world</p>`,\r\n                editorOption: {\r\n                    placeholder: '',\r\n                    theme: 'snow',  // or 'bubble'\r\n                    modules: {\r\n                        toolbar: {\r\n                            container: toolbarOptions,  // 工具栏\r\n                            handlers: {\r\n                                'image': function (value) {\r\n                                    if (value) {\r\n                                        // 触发input框选择图片文件\r\n                                        document.querySelector('.avatar input').click();\r\n                                    } else {\r\n                                        this.quill.format('image', false);\r\n                                    }\r\n                                }\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n                header: {\r\n                    // token: sessionStorage.token\r\n                }, // 有的图片服务器要求请求头需要有token\r\n                param:{\r\n                    imgFile:\"\",\r\n                },\r\n                apiurl: \"/text/pupload\"\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n</script>\r\n\r\n<style>\r\n</style>\r\n"]}]}